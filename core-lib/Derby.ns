class Derby usingVmMirror: vmMirror usingPlatform: platform = Value (
 |
   private vmMirror  = vmMirror.
   private actors = platform actors.
   private kernel = platform kernel.
   private Exception = kernel Exception.
 |
  vmMirror derbyConnectionClass: DerbyConnection.
  vmMirror derbyPrepStatementClass: PreparedStatement.
)(
  private class DerbyConnection = Value ()()

  public class DerbyActor new: dbName ifFail: failBlock = Value (
    | connection = vmMirror derbyGetConnection: dbName ifFail: failBlock.|
  )(
    public close = ()

    public prepareStatement: statement <String> ifFail: failBlock <Block> ^ <PreparedStatement> = (
      ^ vmMirror derby: connection prepareStatement: statement ifFail: failBlock.
    )

    public prepareStatement: statement <String> ^ <PreparedStatement> = (
     ^ prepareStatement: statement ifFail: defaultHandler.
    )

    public execute: statement <String> callback: aBlock ifFail: failBlock = (
      ^ vmMirror derby: connection executeStatement: statement callback: aBlock ifFail: failBlock.
    )

    public execute: statement <String> callback: aBlock = (
      ^ execute: statement callback: aBlock ifFail: defaultHandler.
    )
  )

  public class PreparedStatement = ()(
    public execute: args <Array> callback: aBlock <Block> ifFail: failBlock = (
      ^ vmMirror derby: self executePreparedStatement: args callback: aBlock ifFail: failBlock.
    )

    public execute: args <Array> callback: aBlock <Block> = (
      self execute: args callback: aBlock ifFail: defaultHandler.
    )
  ) : (
    new = ( self error: 'use DerbyConnection #prepareStatement: instead')
  )

  public class SQLException signalWith: aMessage = Exception (
    | public message = aMessage. |
    self signal.
  )(
    public asString = (
      ^ 'SQLException(' + message + ')'
    )
  )

  public start = (
    vmMirror derbyStart: nil.
  )

  public stop = (
    vmMirror derbyStop: nil.
  )

  public connect: dbName ifFail: failBlock = (
      | connection |
      connection:: (actors createActorFromValue: DerbyActor) <-: new: dbName ifFail: failBlock.
      ^ connection.
    )

  public connect: dbName = (
    ^ connect: dbName ifFail: defaultHandler.
  )

  private defaultHandler = (
    ^ [ :sym :msg |
      (sym asString beginsWith: 'SQLException') ifTrue: [
        ('' + sym + '   ' + msg) println.
        SQLException signalWith: msg.
      ]
    ]
  )
)